import logging
import os
from io import BytesIO
from typing import Optional

import ollama
import requests
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from dotenv import load_dotenv
from google import genai  # type: ignore
from google.genai import types  # type: ignore

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Constants
OLLAMA_MODEL_NAME = "mistral"
GEMINI_MODEL_NAME = "gemini-2.0-flash-preview-image-generation"


def mistral_generate_title(caption: str, brand: str) -> str:
    """
    Generate a short and catchy poster title using Mistral.
    Emojis are replaced by their meaning, no emojis in the final title.
    """
    prompt = f""" 
        You are a marketing copywriter. Rewrite the following product caption into
        a short, catchy poster title (max 2 sentences). It should be engaging and
        suitable as the headline on an Instagram sales poster. Do not include emojis,
        just extract their meaning.

        Caption: {caption}
        Brand: {brand}

        Output only the title text.
    """
    response = ollama.generate(model=OLLAMA_MODEL_NAME, prompt=prompt)
    return response.get("response", "").strip()


def fetch_image_bytes(image_url: str) -> Optional[bytes]:
    """Fetch an image from a given URL and return its bytes."""
    try:
        response = requests.get(image_url, timeout=10)
        response.raise_for_status()
        return response.content
    except requests.RequestException as e:
        logger.error("Failed to fetch image: %s", e)
        return None


def poster_generation(insta_caption: str, brand: str, image_url: str) -> None:
    """
    Generate an Instagram poster with a clean design.
    - Title generated by Mistral
    - Poster designed by Gemini using the product image
    """
    client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

    # Step 1: Generate a poster title
    poster_title = mistral_generate_title(insta_caption, brand)
    logger.debug("Generated poster title: %s", poster_title)

    # Step 2: Fetch product image
    image_bytes = fetch_image_bytes(image_url)
    if not image_bytes:
        return

    # Step 3: Ask Gemini to design poster
    try:
        response = client.models.generate_content(
            model=GEMINI_MODEL_NAME,
            contents=[
                types.Part(
                    inline_data=types.Blob(
                        mime_type="image/jpeg",
                        data=image_bytes,
                    )
                ),
                types.Part(
                    text=(
                        "Instruction: Create a clean, minimalistic Instagram poster "
                        "using ONLY the provided product image.\n\n"
                        "Rules:\n"
                        "- Do NOT generate or invent random text.\n"
                        "- Only place this Title and Brand name on the poster.\n"
                        f"- Title: {poster_title}\n"
                        f"- Brand: {brand}\n"
                        "- Do not include the full caption, hashtags, emojis, or filler text.\n"
                        "- Place the product in the center with a modern clean background.\n"
                        "- Title goes at the top as headline, Brand name goes neatly at the bottom."
                    )
                ),
            ],
            config=types.GenerateContentConfig(response_modalities=["TEXT", "IMAGE"]),
        )
    except Exception as e:
        logger.error("Gemini generation failed: %s", e)
        return

    # Step 4: Save and display posters
    if response.candidates:
        for idx, part in enumerate(response.candidates[0].content.parts):
            if part.inline_data:
                poster = Image.open(BytesIO(part.inline_data.data))
                file_name = f"poster_{idx}.png"
                poster.save(file_name)

                plt.imshow(np.array(poster))
                plt.axis("off")
                plt.show()

                logger.info("âœ… Saved %s", file_name)
            elif part.text:
                logger.info("Model text output: %s", part.text)